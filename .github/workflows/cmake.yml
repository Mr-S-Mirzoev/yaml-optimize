name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}

    - uses: DoozyX/clang-format-lint-action@v0.16.2
      with:
        source: '.'
        clangFormatVersion: 16
        style: file
        inplace: True

    - uses: EndBug/add-and-commit@v9
      with:
        author_name: GitHub Actions
        author_email: actions@github.com
        message: 'Committing clang-format changes'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DYO_BUILD_TOOLS=1 -DYO_BUILD_TESTS=1

    - name: Get the number of CPUs that the current process has access to.
      id: cpus
      run: |
        from os import environ, sched_getaffinity

        num_cpus = len(sched_getaffinity(0))
        output_file = environ["GITHUB_OUTPUT"]
        with open(output_file, "a", encoding="utf-8") as output_stream:
            output_stream.write(f"count={num_cpus}\n")
      shell: python

    - name: Build
      # Build your program with the given configuration in a multithreaded environment
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j ${{steps.cpus.outputs.count}}

    - name: Test
      working-directory: ${{github.workspace}}/build/test
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
